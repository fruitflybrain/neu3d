import { Neu3D } from './neu3d';
const Tweakpane = require('tweakpane');
// import dat from '../etc/dat.gui';
import { datGuiPresets } from './presets.js';

/**
* Initialize Control Panel dat.GUI
* @param {object} options 
*/
Neu3D.prototype.initControlPanel = function(options = {}) {
  let GUIOptions = {
    container: (options.container !== undefined) ? options.container : undefined,
    // autoPlace: (options.autoPlace !== undefined) ? options.autoPlace : false,
    // resizable: (options.resizable !== undefined) ? options.resizable : true,
    // scrollable: (options.scrollable !== undefined) ? options.scrollable : true,
    // closeOnTop: (options.closeOnTop !== undefined) ? options.closeOnTop : true,
    // createButtons: (options.createButtons !== undefined) ? options.createButtons : true,
    // preset: (options.preset !== undefined) ? options.preset : "Low",
    // load: datGuiPresets
  };
  for (let key in options) {
    if (!(key in GUIOptions)) {
      GUIOptions[key] = options[key];
    }
  }
  
  let controlPanel = new Tweakpane(GUIOptions);
  // controlPanel.remember(this.settings);
  // controlPanel.remember(this.settings.toneMappingPass);
  // controlPanel.remember(this.settings.bloomPass);
  // controlPanel.remember(this.settings.effectFXAA);
  // controlPanel.remember(this.settings.backrenderSSAO);
  // controlPanel.__closeButton.style.visibility = 'hidden';
  this._controlPanelBtnIds = []
  let neuronNum = controlPanel.addMonitor(this.uiVars, 'frontNum', {label: '# Neurons: '});
  // neuronNum.domElement.style["pointerEvents"] = "None";
  // neuronNum.domElement.parentNode.parentNode.classList.addInput('noneurons');

  // if (GUIOptions['createButtons']) {
  //   function _createBtn(name, icon, iconAttrs, tooltip, func) {
  //     let newButton = function () {
  //       this[name] = func;
  //     };
  //     let btn = new newButton();
  //     let buttonid = controlPanel.addInput(btn, name).title(tooltip).icon(icon, "strip", iconAttrs);
  //     return buttonid;
  //   }
    
  //   let btnId = ''
  //   btnId = _createBtn("uploadFile", "fa fa-upload", {}, "Upload SWC File", () => { this.fileUploadInput.click(); });
  //   this._controlPanelBtnIds.push(btnId);
  //   btnId = _createBtn("resetView", "fa fa-sync", { "aria-hidden": "true" }, "Reset View", () => { this.resetView() });
  //   this._controlPanelBtnIds.push(btnId);
  //   btnId = _createBtn("resetVisibleView", "fa fa-align-justify", {}, "Center and zoom into visible Neurons/Synapses", () => { this.resetVisibleView() });
  //   this._controlPanelBtnIds.push(btnId);
  //   btnId = _createBtn("hideAll", "fa fa-eye-slash", {}, "Hide All", () => { this.hideAll() });
  //   this._controlPanelBtnIds.push(btnId);
  //   btnId = _createBtn("showAll", "fa fa-eye", {}, "Show All", () => { this.showAll() });
  //   this._controlPanelBtnIds.push(btnId);
  //   btnId = _createBtn("takeScreenshot", "fa fa-camera", {}, "Download Screenshot", () => { this._take_screenshot = true; });
  //   this._controlPanelBtnIds.push(btnId);
  //   btnId = _createBtn("removeUnpin", "fa fa-trash", {}, "Remove Unpinned Neurons", () => { this.removeUnpinned(); })
  //   this._controlPanelBtnIds.push(btnId);
  //   btnId = _createBtn("removeUnpin", "fa fa-map-upin", {}, "Unpin All", () => { this.unpinAll(); })
  //   this._controlPanelBtnIds.push(btnId);
  //   btnId = _createBtn("showSettings", "fa fa-cogs", {}, "Display Settings", () => { controlPanel.__closeButton.click(); })
  //   this._controlPanelBtnIds.push(btnId);
  // }
  // add settings
  let f_vis = controlPanel.addFolder('Settings');
  let f0 = f_vis.addFolder({title:'Display Mode', expanded:false});
  f0.addInput(this.settings, 'neuron3d', {label: "Enable 3D Mode"});
  f0.addInput(this.settings, 'neuron3dMode', {
    options: {
      low: 1, 
      medium: 2, 
      high: 3
    }}
  );
  f0.addInput(this.settings, 'synapseMode');
  
  let f1 = f_vis.addFolder({title: 'Visualization', expanded:false});
  f1.addInput(this.settings, 'meshWireframe', {label: "Show Wireframe"});
  f1.addInput(this.settings, 'backgroundColor', {label: "Background"});
  let f1_1 = f1.addFolder({title: 'Opacity', expanded:false});
  
  f1_1.addInput(this.settings, 'defaultOpacity', {min: 0.0, max: 1.0});//.listen();
  f1_1.addInput(this.settings, 'synapseOpacity', {min: 0.0, max: 1.0});//.listen();
  f1_1.addInput(this.settings, 'nonHighlightableOpacity', {min: 0.0, max: 1.0});//.listen();
  f1_1.addInput(this.settings, 'lowOpacity', {min: 0.0, max: 1.0});//.listen();
  f1_1.addInput(this.settings, 'pinOpacity', {min: 0.0, max: 1.0});//.listen();
  f1_1.addInput(this.settings, 'pinLowOpacity', {min: 0.0, max: 1.0});//.listen();
  f1_1.addInput(this.settings, 'highlightedObjectOpacity', {min: 0.0, max: 1.0});//.listen();
  f1_1.addInput(this.settings, 'backgroundOpacity', {min: 0.0, max: 1.0});//.listen();
  f1_1.addInput(this.settings, 'backgroundWireframeOpacity', {min: 0.0, max: 1.0});//.listen();
  
  let f1_2 = f1.addFolder({title: 'Advanced', expanded:false});
  
  f1_2.addInput(this.settings.toneMappingPass, 'brightness', {label: "ToneMap Brightness"});
  f1_2.addInput(this.settings.bloomPass, 'radius', {label: "BloomRadius", min:0., max:10.});
  f1_2.addInput(this.settings.bloomPass, 'strength', {label: "BloomStrength", min:0., max:1.});
  f1_2.addInput(this.settings.bloomPass, 'threshold', {label: "BloomThreshold", min:0., max:2.});
  f1_2.addInput(this.settings.effectFXAA, 'enabled', {label: "FXAA"});
  f1_2.addInput(this.settings.backrenderSSAO, 'enabled', {label: "SSAO"});
  
  let f2 = f_vis.addFolder({title: 'Size', expanded:false});
  // f2.addInput(this.settings, 'defaultRadius', this.settings.minRadius, this.settings.maxRadius);//.listen();
  // f2.addInput(this.settings, 'defaultSomaRadius', this.settings.minSomaRadius, this.settings.maxSomaRadius);//.listen();
  // f2.addInput(this.settings, 'defaultSynapseRadius', this.settings.minSynapseRadius, this.settings.maxSynapseRadius);//.listen();
  
  // let ctl_minR = f2.addInput(this.settings, 'minRadius', {min: 0});//.listen();
  // ctl_minR.onChange((value) => { value = Math.min(value, this.settings.maxRadius); })
  // let ctl_maxR = f2.addInput(this.settings, 'maxRadius', {min: 0});//.listen();
  // ctl_maxR.onChange((value) => { value = Math.max(value, this.settings.minRadius); })
  // let ctl_minSomaR = f2.addInput(this.settings, 'minSomaRadius', {min: 0});//.listen();
  // ctl_minSomaR.onChange((value) => { value = Math.min(value, this.settings.maxSomaRadius); })
  // let ctl_maxSomaR = f2.addInput(this.settings, 'maxSomaRadius', {min: 0});//.listen();
  // ctl_maxSomaR.onChange((value) => { value = Math.max(value, this.settings.minSomaRadius); })
  // let ctl_minSynR = f2.addInput(this.settings, 'minSynapseRadius', {min: 0});//.listen();
  // ctl_minSynR.onChange((value) => { value = Math.min(value, this.settings.maxSynapseRadius); })
  // let ctl_maxSynR = f2.addInput(this.settings, 'maxSynapseRadius', {min: 0});//.listen();
  // ctl_maxSynR.onChange((value) => { value = Math.max(value, this.settings.minSynapseRadius); })
  
  
  this.settings.on("change", ((e) => {
    controlPanel.refresh();
  }), [ 
    'neuron3d', 'neuron3dMode', 'synapseMode', 'meshWireframe', 'defaultOpacity', 
    'synapseOpacity', 'nonHighlightableOpacity', 'lowOpacity', 'pinOpacity', 'pinLowOpacity', 
    'highlightedObjectOpacity', 'backgroundOpacity', 'backgroundWireframeOpacity',
    'defaultRadius', 'defaultSomaRadius', 'defaultSynapseRadius', 'minRadius', 'maxRadius', 
    'minSomaRadius', 'maxSomaRadius', 'minSynapseRadius', 'maxSynapseRadius', 'backgroundColor'
  ]);
  this.settings.toneMappingPass.on('change', ((e)=>{controlPanel.refresh();}), ['brightness']);
  this.settings.bloomPass.on('change', ((e)=>{controlPanel.refresh();}), ['radius', 'strength', 'threshold']);
  this.settings.effectFXAA.on('change', ((e)=>{controlPanel.refresh();}), ['enabled']);
  this.settings.backrenderSSAO.on('change', ((e)=>{controlPanel.refresh();}), ['enabled']);
  this.uiVars.on('change', ((e)=>{controlPanel.refresh();}), ['frontNum']);
  
  // let f3 = f_vis.addFolder('Animation');
  // f3.addInput(this.states, 'animate');
  // f3.addInput(this.settings, 'meshOscAmp', 0.0, 1.0);
  
  // controlPanel.open();
  return controlPanel;
}

/**
* Correctly destroy dat GUI
*/
Neu3D.prototype.disposeControlPanel = function() {
  this.controlPanel.dispose()
  // let folder = this.controlPanel.__folders['Settings'].__folders['Display Mode'];
  // this.controlPanel.__folders['Settings'].removeFolder(folder);
  // folder = this.controlPanel.__folders['Settings'].__folders['Visualization'].__folders['Opacity']
  // this.controlPanel.__folders['Settings'].__folders['Visualization'].removeFolder(folder);
  // folder = this.controlPanel.__folders['Settings'].__folders['Visualization'].__folders['Advanced']
  // this.controlPanel.__folders['Settings'].__folders['Visualization'].removeFolder(folder);
  // folder = this.controlPanel.__folders['Settings'].__folders['Visualization'];
  // this.controlPanel.__folders['Settings'].removeFolder(folder);
  // folder = this.controlPanel.__folders['Settings'].__folders['Size'];
  // this.controlPanel.__folders['Settings'].removeFolder(folder);
  // folder = this.controlPanel.__folders['Settings'];
  // this.controlPanel.removeFolder(folder);
  // for (let b of this._controlPanelBtnIds) {
  //   this.controlPanel.remove(b);
  // }
  // for (let c of this.controlPanel.__controllers){
  //   this.controlPanel.remove(c)   
  // } 
  // this.controlPanel.updateDisplay();
  // this.controlPanel.destroy();    
}

export { Neu3D };